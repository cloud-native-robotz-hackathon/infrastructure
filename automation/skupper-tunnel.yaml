---
# Prepare the data-center
- hosts: localhost
  gather_facts: false
  tags:
    - data-center
  tasks:
    - name: Restart skupper-site-controller
      kubernetes.core.k8s:
        state: absent
        kubeconfig: "kubeconfig-data-center"
        namespace: openshift-operators
        api_version: v1
        kind: Pod
        label_selectors:
          - app.kubernetes.io/name=skupper-site-controller
        wait_condition:
          type: Ready
          status: 'True'

    - name: Destroy a namespaces
      kubernetes.core.k8s:
        state: absent
        wait: true
        kubeconfig: "kubeconfig-data-center"
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: robot
          spec: {}

    - name: Create a namespaces
      kubernetes.core.k8s:
        state: present
        wait: true
        kubeconfig: "kubeconfig-data-center"
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: robot
          spec: {}

    - name: Start skupper at data-center
      kubernetes.core.k8s:
        state: present
        kubeconfig: "kubeconfig-data-center"
        definition:
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: skupper-site
            namespace: robot
          data:
            cluster-permissions: "false"
            console: "true"
            console-authentication: internal
            console-password: ""
            console-user: ""
            enable-skupper-events: "true"
            flow-collector: "true"
            ingress: route
            name: data-center
            router-console: "false"
            router-logging: ""
            router-mode: interior
            service-controller: "true"
            service-sync: "true"

    - name: Wait for skupper-site
      kubernetes.core.k8s_info:
        kubeconfig: "kubeconfig-data-center"
        namespace: "robot"
        api_version: v1
        kind: Pods
        label_selectors:
          app.kubernetes.io/part-of=skupper
        wait: true
        wait_condition:
          type: Ready

- hosts: robots
  gather_facts: false
  tags: 
    -  robots
  tasks:

    # - name: Reset MicroShift
    #   ansible.builtin.include_role:
    #     name: robot
    #     tasks_from: reset-microshift.yaml

    - name: Download kubeconfig
      ansible.builtin.include_role:
        name: robot
        tasks_from: download-kubeconfig.yaml

    - name: Destroy skupper a namespaces 
      delegate_to: localhost
      kubernetes.core.k8s:
        state: absent
        wait: true
        kubeconfig: "kubeconfig-{{ inventory_hostname }}"
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: skupper
          spec: {}

    - name: Create skupper a namespaces 
      delegate_to: localhost
      kubernetes.core.k8s:
        state: present
        wait: true
        kubeconfig: "kubeconfig-{{ inventory_hostname }}"
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: skupper
          spec: {}
    
    - name: Download skupper
      ansible.builtin.get_url:
        url: https://github.com/skupperproject/skupper/releases/download/1.8.3/skupper-cli-1.8.3-linux-arm64.tgz
        dest: /tmp/skupper.tgz
        checksum: md5:6950f429a712fcd6cec0d67bc87a6f2f

    - name: Unarchive skupper
      ansible.builtin.unarchive:
        src: /tmp/skupper.tgz
        dest: /usr/local/bin
        remote_src: yes

    - name: Init Skupper
      ansible.builtin.shell:
        cmd: "/usr/local/bin/skupper init --ingress none --namespace skupper --site-name {{ inventory_hostname }}"

    - name: Token request for robot
      delegate_to: localhost
      kubernetes.core.k8s:
        state: present
        kubeconfig: "kubeconfig-data-center"
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            namespace: robot
            labels:
              skupper.io/type: connection-token-request
            name: "{{ inventory_hostname }}"

    - name: Fetch secret from data-center
      delegate_to: localhost
      kubernetes.core.k8s_info:
        kubeconfig: "kubeconfig-data-center"
        api_version: v1
        kind: Secret
        name: "{{ inventory_hostname }}"
        namespace: robot
      register: token_secret
      retries: 10
      until: token_secret.resources[0].metadata.labels['skupper.io/type'] == "connection-token"

    - name: Extract & change token
      ansible.builtin.set_fact:
        token: "{{ token_secret.resources[0] | combine(to_change, recursive=true)  }}"
      vars:
        to_change:
          metadata:
            namespace: skupper
            resourceVersion:
            uid:
            creationTimestamp:

    - name: Apply token at robot
      delegate_to: localhost
      kubernetes.core.k8s:
        state: present
        kubeconfig: "kubeconfig-{{ inventory_hostname  }}"
        definition: "{{ token  }}"

    - name: Deploy reverse proxy
      delegate_to: localhost
      tags:
        - deploy-reverse-proxy
        - reverse-proxy
      kubernetes.core.k8s:
        state: present
        kubeconfig: "kubeconfig-{{ inventory_hostname  }}"
        wait: yes
        wait_condition:
          type: Available
          status: "True"
          reason: MinimumReplicasAvailable
        definition:
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: "{{ inventory_hostname }}"
            namespace: skupper
            labels:
              app: reverse-proxy
              app.openshift.io/runtime: traefik
              app.kubernetes.io/part-of: reverse-proxy
          spec:
            replicas: 1
            strategy:
              type: Recreate
            selector:
              matchLabels:
                app: reverse-proxy
            template:
              metadata:
                labels:
                  app: reverse-proxy
              spec:
                automountServiceAccountToken: false
                containers:
                  - image: quay.io/cloud-native-robotz-hackathon/ubi-traefik:20250324T164622
                    name: traefik
                    ports:
                      - name: edge-controller
                        containerPort: 5000
                      - name: k8s-api
                        containerPort: 6443
                      - name: ingress-http
                        containerPort: 80
                      - name: ingress-https
                        containerPort: 443
                    env:
                      - name: HOST_IP
                        valueFrom:
                          fieldRef:
                            fieldPath: status.hostIP        

      # skupper expose deployment --namespace skupper reverse-proxy
      # deployment reverse-proxy exposed as reverse-proxy
    - name: Expose reverse-proxy
      tags:
        - reverse-proxy
        - expose-reverse-proxy
      ansible.builtin.shell:
        cmd: "/usr/local/bin/skupper expose deployment --namespace skupper {{ inventory_hostname }}"

    - name: Get ingress domain
      delegate_to: localhost
      tags:
        - check
      kubernetes.core.k8s_info:
        kubeconfig: "kubeconfig-data-center"
        namespace: "openshift-ingress-operator"
        api_version: operator.openshift.io/v1
        kind: IngressController
        name: "default"
      register: raw_ingress_controller


    - name: Create wildcard-http
      delegate_to: localhost
      kubernetes.core.k8s:
        state: present
        wait: true
        kubeconfig: "kubeconfig-data-center"
        definition:
          apiVersion: route.openshift.io/v1
          kind: Route
          metadata:
            name: "{{ inventory_hostname }}-http"
            namespace: robot
          spec:
            host: "wildcard-http.{{ inventory_hostname }}.{{ raw_ingress_controller.resources[0].status.domain  }}"
            path: /
            to:
              name: gort
              weight: 100
              kind: Service
            port:
              targetPort: port80
            wildcardPolicy: Subdomain
            alternateBackends: []

    - name: Create wildcard-https
      delegate_to: localhost
      kubernetes.core.k8s:
        state: present
        wait: true
        kubeconfig: "kubeconfig-data-center"
        definition:
          apiVersion: route.openshift.io/v1
          kind: Route
          metadata:
            name: "{{ inventory_hostname }}-https"
            namespace: robot
          spec:
            host: "wildcard-https.{{ inventory_hostname }}.{{ raw_ingress_controller.resources[0].status.domain  }}"
            to:
              name: gort
              weight: 100
              kind: Service
            port:
              targetPort: port443
            tls:
              termination: passthrough
              insecureEdgeTerminationPolicy: None
            wildcardPolicy: Subdomain
            alternateBackends: []

    - name: Wait robot services
      delegate_to: localhost
      tags:
        - check
      kubernetes.core.k8s_info:
        kubeconfig: "kubeconfig-data-center"
        namespace: "robot"
        api_version: v1
        kind: Service
        name: "{{ inventory_hostname }}"
        wait: true

    - name: Run check pod
      delegate_to: localhost
      tags:
        - check
      kubernetes.core.k8s:
        state: present
        kubeconfig: "kubeconfig-data-center"
        wait: true
        wait_condition:
          type: Initialized
          reason: "PodCompleted"
        definition:
          apiVersion: v1
          kind: Pod
          metadata:
            generateName: "check-skupper-connect-{{ inventory_hostname }}-"
            namespace: robot
          spec:
            restartPolicy: Never
            containers:
              - name: checker
                image: registry.access.redhat.com/ubi9/ubi-minimal:latest
                command:
                  - "/bin/sh"
                  - "-c"
                  - |
                      set -x
                      curl http://{{ inventory_hostname }}.robot.svc.cluster.local:5000/
                      curl -k https://{{ inventory_hostname }}.robot.svc.cluster.local:6443/
                      curl http://{{ inventory_hostname }}.robot.svc.cluster.local:80/
                      curl -k https://{{ inventory_hostname }}.robot.svc.cluster.local:443/
