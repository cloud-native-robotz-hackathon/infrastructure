---
- hosts: robots
  gather_facts: false
  tasks:
    - name: Stop microshift
      ansible.builtin.systemd_service:
        state: stopped
        name: microshift.service

    - name: Clean /var/lib/microshift
      ansible.builtin.file:
        state: absent
        path: /var/lib/microshift
 
    - name: Creating Microshift config
      copy:
        dest: "/etc/microshift/config.yaml"
        content: |
          cluster:
            domain: apps.{{ inventory_hostname }}

    - name: Start microshift
      ansible.builtin.systemd_service:
        state: started
        name: microshift.service

    - name: Wait for /var/lib/microshift/resources/kubeadmin/kubeconfig
      ansible.builtin.wait_for:
        path: /var/lib/microshift/resources/kubeadmin/kubeconfig
        state: present
        msg: Timeout to find file kubeconfig

    - name: ~/.kube/
      ansible.builtin.file:
        state: directory
        path: ~/.kube/

    - name: Install kubeconfig to root user
      ansible.builtin.copy:
        src: "/var/lib/microshift/resources/kubeadmin/kubeconfig"
        dest: "~/.kube/config"
        remote_src: yes

    - name: Fetch kubeconfig
      ansible.builtin.fetch:
        src: "/var/lib/microshift/resources/kubeadmin/kubeconfig"
        dest: "kubeconfig-{{ inventory_hostname }}"
        flat: yes


    - name: Read kubeconfig
      delegate_to: localhost
      include_vars:
        file: "kubeconfig-{{ inventory_hostname }}"
        name: kubeconfig

    - name: Rebuild new kubeconfig
      set_fact:
        kubeconfig: "{{ kubeconfig | combine(fields_to_change, recursive=true) }}"
      vars:
        fields_to_change:
          clusters:
            - name: "{{ inventory_hostname.split('.') | first }}"
              cluster:
                server: "https://{{ inventory_hostname }}:6443"
                insecure-skip-tls-verify: true
          contexts:
            - name: "{{ inventory_hostname.split('.') | first }}"
              context: 
                cluster: "{{ inventory_hostname.split('.') | first }}"
                namespace: "default"
                user: "user"
          current-context: "{{ inventory_hostname.split('.') | first }}"
  
    - name: "Write kubeconfig-{{ inventory_hostname }}"
      delegate_to: localhost
      copy:
        content: "{{ kubeconfig | to_nice_yaml }}"
        dest: "kubeconfig-{{ inventory_hostname }}"

    - name: Wait for api
      ansible.builtin.wait_for:
        port: 6443

    - name: Info
      ansible.builtin.debug:
        msg: "Run export KUBECONFIG=kubeconfig-{{ inventory_hostname }}; to have oc/kubectl access."
